apiVersion: v1kind: Servicemetadata:  annotations:    service.beta.kubernetes.io/azure-load-balancer-resource-group <ResourceGroup>  name: azure-load-balancerspec:  loadBalancerIP: <PublicIPThatYouCreated>  type: LoadBalancer  ports:  - port: 80  selector:    app: azure-load-balancer


oc get pdb -A | awk ' where $5=="0" {print $0}' | awk '{print $1,$2}' | sed 's/^/oc patch pdb -n /g' | sed "s/$/ --type=merge -p '{\"spec\":{\"minAvailable\":0}}'/g"
for i in `oc get nodes -l node-role.kubernetes.io/worker | sed '1d' | awk '{print $1}'`; do echo oc adm drain $i; echo oc adm cordon $i --ignore-daemonsets --delete-emptydir-data; echo oc delete machine $i -n openshift-machine-api ; echo oc get nodes ; done

# DNS 
for p in $(oc -n openshift-dns get pods -o custom-columns=':.metadata.name' --no-headers | grep dns-default); do echo -n "$p: "; oc -n openshift-dns exec $p -c dns -- md5sum /etc/coredns/Corefile; done
# Troubleshooting DNS Resolution in Openshift
https://access.redhat.com/solutions/3804501

oc adm inspect namespace/<NameSpace> 

oc get pods -A -o jsonpath="{.items[*].spec.containers[*].image}" | sed 's/ /\n/g' | sort | uniq ; echo ; echo Domains: ; echo ;kubectl get pods -A -o jsonpath="{.items[*].spec.containers[*].image}" | sed 's/ /\n/g' | cut -d "/" -f1 | sort | uniq ; echo
oc get dns.operator/default -oyaml 


    echo ; oc get secret azure-credentials -n kube-system --template='{{range $k, $v := .data }} {{ $k }} {{ " : " }} {{ $v | base64decode }} {{ "\n" }} {{ end }}' ; echo
    
    
    
    # To Clone existing MachineSet Configurations into a new one (NewName) :

 


oc get machinesets -n openshift-machine-api

 

oc get machineset -n openshift-machine-api XXXXXXXX -ojson | jq 'del(.status, .metadata.annotations, .metadata.creationTimestamp, .metadata.generation, .metadata.resourceVersion, .metadata.uid)' | jq '.metadata.name = "NewName"' | jq '.spec.selector.matchLabels."machine.openshift.io/cluster-api-machineset" = "NewName"' | jq '.spec.template.metadata.labels."machine.openshift.io/cluster-api-machineset" = "NewName"' > NewMachineSet.json

 


cat NewMachineSet.json

 

oc apply -f NewMachineSet.json


check certificate from inside the node :
 
 ----------------------------------------------------
oc debug node/XXXX 
chroot /host 
bash
for cert in /etc/kubernetes/*.crt; do     echo -n "$cert: "; openssl x509 -in "$cert" -noout -enddate; done




Get ARO Cluster Service Principle client ID and Client Secret :
 
echo ; oc get secret azure-credentials -n kube-system --template='{{range $k, $v := .data }} {{ $k }} {{ " : " }} {{ $v | base64decode }} {{ "\n" }} {{ end }}' ; echo
 
Login using Service Principal :
 
               az login --service-principal --username $AROSPID --password $AROSPSecret --tenant $TENANT_ID --allow-no-subscriptions
               az account set --subscription $AROSubID
 

------------------------------------
Check ARO Cluster if Public or Private
az aro show -n $CLUSTER_NAME -g $RESOURCE_GROUP --query='{api:apiserverProfile.visibility,ingress:ingressProfiles[*].{name: name,visibility: visibility}}'

