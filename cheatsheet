
# Cluster Autoscaler Annotation
cluster-autoscaler.kubernetes.io/scale-down-disabled=true
kubectl annotate node kubectl annotate node aks-nodepool1-79955018-vmss000002 cluster-autoscaler.kubernetes.io/scale-down-disabled=true


# Change line ending from Windows to Linux in VIM
:set ff=unix

# Getting metrics cdvisor
kubectl get --raw /api/v1/nodes/<NODE_NAME>/proxy/metrics/cadvisor

# API Server check
az vmss run-command invoke -g MC_AKS_AKS_WESTEUROPE -n aks-nodepool1-79955018-vmss --command-id RunShellScript --instance-id 4 -
-query 'value[0].message' -otsv --scripts  "nc -v -w 2 aks-aks-aa1792-e3fafdea.hcp.westeurope.azmk8s.io 443"

journalctl -D . -u kubelet>Kubelet.txt 
journalctl -D . -u docker>docker.txt 
 
journalctl -u kubelet --file system.journal 
journalctl -u kubelet --file system.journal -r  
 
journalctl -u docker --file system.journal 
journalctl -u docker --file system.journal -r  
 
journalctl -S "2020-10-30 13:00:00" -U "2020-10-30 18:00:00"  --file system.journal 
journalctl -S "2020-10-30 13:00:00" -U "2020-10-30 18:00:00"  --file system.journal -r 

crictl rmi --prune

# Getting the Nodes where CoreDNS is running
kubectl get po --namespace=kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].spec.nodeName}')

#Get the CoreDNS IP Address
k get po --namespace=kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].status.podIP}'

----------
IPS=$(k get po --namespace=kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].status.podIP}')
for node in $IPS; do echo $node; done
--------
# Get images of a pod
kubectl get pods --namespace=calico-system -o jsonpath="{.items[*].spec.containers[*].image}" | tr -s '[[:space:]]' '\n' | sort | uniq -c
-----------
while true; do nslookup zoso.ro; sleep 0.2; done
-----------
for i in {1..2000}; do nc -zv 20.86.222.46 80; sleep 0.5; done
--------
# Extract the Cluster Certificate Authorithy
$ kubectl config view --minify --raw --output 'jsonpath={..cluster.certificate-authority-data}' | base64 -d | openssl x509 -text -out -
--------

# Get Certificate from .kube/config
kubectl config view --minify --raw --output 'jsonpath={..user.client-certificate-data}' | base64 -d | openssl x509 -text -out -
----------
# Extract the Client Certificate
$kubectl config view --minify --raw --output 'jsonpath={..user.client-certificate-data}' | base64 -d | openssl x509 -text -out -

# Get metrics from nodes
k get --raw /api/v1/nodes/aks-nodepool1-12420863-vmss000003/proxy/metrics/cadvisor

# Get Ingress IP address programatically
INGRESS_IP=$(kubectl get ingress basic-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

# Openssl Generate a CSR + Key
openssl req -new -newkey rsa:2048 -nodes -keyout netest.cloud.key -out netest.cloud.csr

# While loop
while true; do curl 20.23.196.8; sleep 0.1; echo ""; done

az vmss run-command invoke --resource-group MC_USEDFADSAARSG11_USEDFADSAAAKS03_eastus --name aks-agentpool-42184020-vmss --command-id RunShellScript --instance-id 0 --scripts 'nc -v -w 2 //10.1.0.21 10250' --output tsv --query 'value[0].message'

node.kubernetes.io/exclude-from-external-load-balancers=true

# Run commands on VMSS
az vmss run-command invoke -g MC_AKS_AKS_WESTEUROPE -n aks-nodepool1-33475044-vmss --command-id RunShellScript --instance-id 0 --query 'value[0].message' -otsv --scripts  "openssl x509 -in /etc/kubernetes/certs/apiserver.crt -text -noout | grep -A6 Vali"
az vmss run-command invoke --resource-group "MC_AKS_AKS_WESTEUROPE" --name "aks-nodepool1-33475044-vmss" --command-id RunShellScript --instan
ce-id 0 --scripts "openssl x509 -in /etc/kubernetes/certs/apiserver.crt -noout " -enddate" --query "values[0].message

az vmss run-command invoke -g MC_test_group_test_eastus2 -n aks-agentpool-39272355-vmss --command-id RunShellScript --instance-id 4 --scripts "cat /etc/kubernetes/azure.json"

# Run commands on VMAS
az vm run-command invoke -g MC_RG- -n aks-prodal-39145615-1 --scripts "hostname && date && curl -k -v https://mcr.microsoft.com/v2/" --command-id RunShellScript
az vm run-command invoke -g MC_RG- -n aks-prodagtpool-39145615-1 --scripts "hostname && date && curl -k -v aks-eu-uksouth-prod-d2c-c208dc99.hcp.uksouth.azmk8s.io"  --command-id RunShellScript

# Change the core dumps location
sysctl -w kernel.core_pattern=/dev/null



# Get the certificate of cluster
kubectl config view --raw -o jsonpath="{.users[?(@.name == 'clusterUser_aks_aks')].user.client-certificate-data}" | base64 -d | openssl x509 -text

# Get the key from kubconfig
kubectl config view --raw -o jsonpath="{.users[?(@.name == 'clusterUser_aks_aks')].user.client-key-data}" | base64 -d

# Create pfx file from crt and key
openssl pkcs12 -export -out aks.pfx -inkey ca.key -in ca.crt

# Get etcd size
kubectl get --raw /metrics | grep etcd_db_total_size_in_bytes

# CoreDNS port reuse
https://github.com/kubernetes/kubernetes/issues/76517#issuecomment-490731578

# NodeLocal DNS
https://kubernetes.io/docs/tasks/administer-cluster/nodelocaldns/#configuration

# Get IMDS Identity
 curl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fmanagement.azure.com%2F' -H Metadata:true -s | jq

# Generate Token for a specific Identity
curl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&client_id=651a3671-82ed-49fb-aa05-b9f1c140e060&resource=https%3A%2F%2Fmanagement.azure.com%2F' -H Metadata:true -s

# IMDS
response=$(curl 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fmanagement.azure.com%2F' -H Metadata:true -s)
access_token=$(echo $response | python -c 'import sys, json; print (json.load(sys.stdin)["access_token"])')
echo The managed identities for Azure resources access token is $access_token


# IMDB Vault
curl -v "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://vault.azure.net" -H "Metadata: true"

# Getting metric for etcd database
kubectl get --raw /metrics | grep etcd_db_total_size_in_bytes 

# ACRPoll role assignment
az role assignment create --assignee 828bfba9-f4ce-44a9-bf4d-e4171d564a19 --scope /subscriptions/ac6361f8-4743-4781-xxxxxx/resourceGroups/IxxI-xxxx-xxx-x01/providers/Microsoft.ContainerRegistry/registries/name --role acrpull

# Get memory on a Linux
ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head

# Get cgroup version on the node
Identify the cgroup version on Linux Nodes

stat -fc %T /sys/fs/cgroup/

For cgroup v2, the output is cgroup2fs.

For cgroup v1, the output is tmpfs.

# AKS Calico
https://docs.tigera.io/calico/latest/getting-started/kubernetes/managed-public-cloud/aks

# Schedule a Pod on a Linux/Windows Node
kubectl run -ti --rm test --image=ubuntu:18.04 --overrides='{"spec": { "nodeSelector": {"kubernetes.io/os": "linux"}}}'


tcpdump -ni eth0 -w /tmp/$(hostname)-ethcap-%Y-%m-%d-TIME-%H-%M.pcap -e -C 300 -G 1800 -K -W 10


openssl s_client -showcerts -connect <your-sql-server-name>:443
openssl s_client -showcerts -connect <your-sql-server-name>:443
openssl s_client -connect sql-liferay-fanid-dev-we-001.database.windows.net:443 -tls1_2

curl -v --insecure --proxy-insecure https://mcr.microsoft.com/v2/

service.beta.kubernetes.io/azure-load-balancer-tcp-idle-timeout: “value”

kubectl debug {problem_pod} --image mcr.microsoft.com/cbl-mariner/base/core:2.0 -- sh -c 'tdnf install -q -y mariner-repos-extended ; tdnf install -q -y tcpdump wireshark-cli ; tcpdump -U -i eth0 -s 256 -w - | tshark -r -'

az network vnet list -g MC_aks_aks_westeurope --query "[].[name]" -o tsv
z network vnet list -g MC_calico_akscalico_westeurope --query "[].dhcpOptions.dnsServers" -o tsv

for i in {1..19}; do echo -n "$i: "; dig +time=1 eastus2qakv.vault.azure.net | grep -e "IN A" -e "connection timed"; done

# Getting logs with Kubectl
kubectl get --raw "/api/v1/nodes/aks-agentpool-18220771-vmss000000/proxy/logs/messages"

Also you can filter for kubelet 

kubectl get --raw "/api/v1/nodes/aks-agentpool-18220771-vmss000000/proxy/logs/messages" |grep kubelet

kubectl get --raw "/api/v1/nodes/aks-agentpool-33673860-vmss000000/proxy/logs/azure/cluster-provision.log"


# Delete bulk evicted Pods
kubectl get pod -n foxutech | grep Evicted | awk '{print $1}' | xargs kubectl delete pod -n foxutech

# Generate SSL signed certificat
# openssl req  -new  -newkey rsa:2048  -nodes  -keyout localhost.key  -out localhost.csr
# openssl  x509  -req  -days 365  -in localhost.csr  -signkey localhost.key  -out localhost.crt

