
# Cluster Autoscaler Annotation
cluster-autoscaler.kubernetes.io/scale-down-disabled=true
kubectl annotate node kubectl annotate node aks-nodepool1-79955018-vmss000002 cluster-autoscaler.kubernetes.io/scale-down-disabled=true


# Change line ending from Windows to Linux in VIM
:set ff=unix

# Getting metrics cdvisor
kubectl get --raw /api/v1/nodes/<NODE_NAME>/proxy/metrics/cadvisor

# API Server check
az vmss run-command invoke -g MC_AKS_AKS_WESTEUROPE -n aks-nodepool1-79955018-vmss --command-id RunShellScript --instance-id 4 -
-query 'value[0].message' -otsv --scripts  "nc -v -w 2 aks-aks-aa1792-e3fafdea.hcp.westeurope.azmk8s.io 443"

journalctl -D . -u kubelet>Kubelet.txt 
journalctl -D . -u docker>docker.txt 
 
journalctl -u kubelet --file system.journal 
journalctl -u kubelet --file system.journal -r  
 
journalctl -u docker --file system.journal 
journalctl -u docker --file system.journal -r  
 
journalctl -S "2020-10-30 13:00:00" -U "2020-10-30 18:00:00"  --file system.journal 
journalctl -S "2020-10-30 13:00:00" -U "2020-10-30 18:00:00"  --file system.journal -r 

crictl rmi --prune

# Getting the Nodes where CoreDNS is running
kubectl get po --namespace=kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].spec.nodeName}')

#Get the CoreDNS IP Address
k get po --namespace=kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].status.podIP}'

----------
IPS=$(k get po --namespace=kube-system -l k8s-app=kube-dns -o jsonpath='{.items[*].status.podIP}')
for node in $IPS; do echo $node; done
--------
# Get images of a pod
kubectl get pods --namespace=calico-system -o jsonpath="{.items[*].spec.containers[*].image}" | tr -s '[[:space:]]' '\n' | sort | uniq -c
-----------
while true; do nslookup zoso.ro; sleep 0.2; done
-----------
for i in {1..2000}; do nc -zv 20.86.222.46 80; sleep 0.5; done
--------
# Extract the Cluster Certificate Authorithy
$ kubectl config view --minify --raw --output 'jsonpath={..cluster.certificate-authority-data}' | base64 -d | openssl x509 -text -out -
--------

# Get Certificate from .kube/config
kubectl config view --minify --raw --output 'jsonpath={..user.client-certificate-data}' | base64 -d | openssl x509 -text -out -
----------
# Extract the Client Certificate
$kubectl config view --minify --raw --output 'jsonpath={..user.client-certificate-data}' | base64 -d | openssl x509 -text -out -

# Get metrics from nodes
k get --raw /api/v1/nodes/aks-nodepool1-12420863-vmss000003/proxy/metrics/cadvisor

# Get Ingress IP address programatically
INGRESS_IP=$(kubectl get ingress basic-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

# Openssl Generate a CSR + Key
openssl req -new -newkey rsa:2048 -nodes -keyout netest.cloud.key -out netest.cloud.csr

# While loop
while true; do curl 20.23.196.8; sleep 0.1; echo ""; done

az vmss run-command invoke --resource-group MC_USEDFADSAARSG11_USEDFADSAAAKS03_eastus --name aks-agentpool-42184020-vmss --command-id RunShellScript --instance-id 0 --scripts 'nc -v -w 2 //10.1.0.21 10250' --output tsv --query 'value[0].message'

node.kubernetes.io/exclude-from-external-load-balancers=true

# Run commands on VMSS
az vmss run-command invoke -g MC_AKS_AKS_WESTEUROPE -n aks-nodepool1-33475044-vmss --command-id RunShellScript --instance-id 0 --query 'value[0].message' -otsv --scripts  "openssl x509 -in /etc/kubernetes/certs/apiserver.crt -text -noout | grep -A6 Vali"
az vmss run-command invoke --resource-group "MC_AKS_AKS_WESTEUROPE" --name "aks-nodepool1-33475044-vmss" --command-id RunShellScript --instan
ce-id 0 --scripts "openssl x509 -in /etc/kubernetes/certs/apiserver.crt -noout " -enddate" --query "values[0].message

az vmss run-command invoke -g MC_test_group_test_eastus2 -n aks-agentpool-39272355-vmss --command-id RunShellScript --instance-id 4 --scripts "cat /etc/kubernetes/azure.json"

# Run commands on VMAS
az vm run-command invoke -g MC_RG- -n aks-prodal-39145615-1 --scripts "hostname && date && curl -k -v https://mcr.microsoft.com/v2/" --command-id RunShellScript
az vm run-command invoke -g MC_RG- -n aks-prodagtpool-39145615-1 --scripts "hostname && date && curl -k -v aks-eu-uksouth-prod-d2c-c208dc99.hcp.uksouth.azmk8s.io"  --command-id RunShellScript

# Change the core dumps location
sysctl -w kernel.core_pattern=/dev/null



# Get the certificate of cluster
kubectl config view --raw -o jsonpath="{.users[?(@.name == 'clusterUser_aks_aks')].user.client-certificate-data}" | base64 -d | openssl x509 -text

# Get the key from kubconfig
kubectl config view --raw -o jsonpath="{.users[?(@.name == 'clusterUser_aks_aks')].user.client-key-data}" | base64 -d

# Create pfx file from crt and key
openssl pkcs12 -export -out aks.pfx -inkey ca.key -in ca.crt
